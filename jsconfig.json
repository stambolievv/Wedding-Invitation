{
  "compilerOptions": {
    // Project options
    "target": "esnext", // Target environment. Most modern browsers support ES6, but you may want to set it to newer or older. (defaults to ES3)
    "module": "esnext", // Sets the module system for the program. See the Modules reference page for more information. You very likely want "CommonJS" for node projects.
    "types": ["node", "vite/client"],

    // Module resolution
    "baseUrl": "./", // Lets you set a base directory to resolve non-absolute module names.
    "moduleResolution": "node", // Pretty much always node for modern JS. Other option is "classic"
    "paths": {}, // A series of entries which re-map imports to lookup locations relative to the baseUrl
    "resolveJsonModule": true, // Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes generating a type for the import based on the static JSON shape.

    // Strict Checks
    "noImplicitAny": false, // Don't show errors when type annotations are not present.
    "alwaysStrict": true, // Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.
    "strict": true, // Turning this on is equivalent to enabling all of the strict mode family options
    "checkJs": true, // This is the equivalent of including // @ts-check at the top of all JavaScript files which are included in your project.
    "allowUnreachableCode": false, // Pick up dead code paths
    "strictNullChecks": true, // When strictNullChecks is true, null and undefined have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.
    "forceConsistentCasingInFileNames": true // This can be problematic if some developers are working in a case-sensitive file system and others aren’t.
  },
  "exclude": ["dist", "node_modules"]
}
